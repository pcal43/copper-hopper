plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'com.matthewprenger.cursegradle'


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.nucleoid.xyz' }
}


configurations {
	// configuration that holds jars to include in the jar
	extraLibs
}

dependencies {
	// Fabric & Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Polymer
	modCompileOnly "eu.pb4:polymer-core:${project.polymer_version}"
	modCompileOnly "eu.pb4:polymer-resource-pack:${project.polymer_version}"
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// JUnit
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}


test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

sourceSets.test {
	resources.srcDirs = ["src/test/resources"]
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
//	from {
//		configurations.include.collect { it.isDirectory() ? it : zipTree(it) }
	//}
}



// https://github.com/modrinth/minotaur
modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "${project.modrinth_projectId}"
	versionNumber = project.mod_version
	versionType = "release"
	uploadFile = remapJar
	changelog = "<p><a href='https://github.com/pcal43/${project.github_projectId}/releases/tag/${project.mod_version}'>https://github.com/pcal43/${project.github_projectId}/releases/tag/${project.mod_version}</a></p>"
	gameVersions = ["${project.minecraft_version}"]
	loaders = ["fabric"]
	dependencies {
		required.project "fabric-api"
	}
}


curseforge {
	apiKey = System.getenv("CURSEFORGE_TOKEN") ?: 'CURSEFORGE_TOKEN NOT_SET'

	project {
		id = "${project.curseforge_projectId}"
		releaseType = "release"
		changelog = "https://github.com/pcal43/${project.github_projectId}/releases/tag/${project.mod_version}"
		changelogType = "markdown"
		mod_version = project.mod_version
		addGameVersion ((String) project.minecraft_version)
		addGameVersion "Fabric"
		mainArtifact(remapJar)

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}
}
